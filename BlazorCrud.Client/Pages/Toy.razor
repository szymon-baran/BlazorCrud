@page "/toy"
@page "/toy/{id:int}"
@using BlazorCrud.Client.Abstraction
@using BlazorCrud.Server.Application
@using BlazorCrud.Shared.Domain
@inject IToyService ToyService
@inject IBrandService BrandService

@if (Id == null)
{
    <PageTitle>New toy</PageTitle>
    <h3>Add a new toy</h3>
}
else
{
    <PageTitle>Edit @toy.Name</PageTitle>
    <h3>Edit <span class="toy-name">@toy.Name</span></h3>
}
<EditForm Model="toy" OnSubmit="Submit">
    <div>
        <label for="name">Name</label>
        <InputText id="name" @bind-Value="toy.Name" class="form-control"></InputText>
    </div>
    <div>
        <label for="brand">Brand</label>
        <InputSelect id="brand" @bind-Value="toy.BrandId" class="form-select">
            @foreach (var brand in BrandService.BrandsToSelectList)
            {
                <option value="@brand.Key" class="btn btn-primary">@brand.Value</option>
            }
        </InputSelect>
    </div>
    <div>
        <label for="toyType">Toy type</label>
        <InputSelect id="toyType" @bind-Value="toy.ToyType" class="form-select">
            @foreach (var toyType in ToyService.ToyTypesToSelectList)
            {
                <option value="@toyType.Key" class="btn btn-primary">@toyType.Value</option>
            }
        </InputSelect>
    </div>
    <br />
    <button type="submit" class="btn btn-success">@submitBtnText</button>
</EditForm>
@if (Id != null)
{
    <button class="btn btn-danger mt-1" @onclick="DeleteToy">Delete toy</button>
}

@code {
    [Parameter]
    public int? Id { get; set; }

    string submitBtnText = "";

    ToyAddEditVM toy = new();

    protected async override Task OnInitializedAsync()
    {
        submitBtnText = Id == null ? "Add toy" : "Edit toy";
        await BrandService.GetBrandsToSelectList();
        toy.BrandId ??= BrandService.BrandsToSelectList.FirstOrDefault().Key;
        await ToyService.GetToyTypesToSelectList();
        toy.ToyType ??= ToyService.ToyTypesToSelectList.FirstOrDefault().Key;
    }

    protected async override Task OnParametersSetAsync()
    {
        if (Id == null)
        {
            // AddForm
        }
        else
        {
            if (Id.HasValue)
                toy = await ToyService.GetToyDetails(Id.Value);
        }
    }

    async Task Submit()
    {
        // to test: OnValidSubmit
        if (Id == null)
        {
            await ToyService.AddToy(toy);
        }
        else
        {
            await ToyService.EditToy(toy);
        }
    }

    async Task DeleteToy()
    {
        await ToyService.DeleteToy(toy.Id.HasValue ? toy.Id.Value : throw new Exception("Missing id value"));
    }
}

<style>
    .toy-name {
        font-weight: bold;
    }
</style>